use interpreter::Machine;

fn eval(code: &str, input: i64) -> Vec<i64> {
    let mut machine = Machine::from_ascii_code(code);
    machine.feed(input);
    machine.eval_multi()
}

#[test]
fn test_basic_io() {
    assert_eq!(eval("3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9", 0), vec![0]);
    assert_eq!(
        eval("3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9", 42),
        vec![1]
    );
    assert_eq!(eval("3,3,1105,-1,9,1101,0,0,12,4,12,99,1", 0), vec![0]);
    assert_eq!(eval("3,3,1105,-1,9,1101,0,0,12,4,12,99,1", 42), vec![1]);
    assert_eq!(eval("3,9,8,9,10,9,4,9,99,-1,8", 8), vec![1]);
    assert_eq!(eval("3,9,8,9,10,9,4,9,99,-1,8", 42), vec![0]);
    assert_eq!(eval("3,9,7,9,10,9,4,9,99,-1,8", 7), vec![1]);
    assert_eq!(eval("3,9,7,9,10,9,4,9,99,-1,8", 8), vec![0]);
    assert_eq!(eval("3,3,1108,-1,8,3,4,3,99", 8), vec![1]);
    assert_eq!(eval("3,3,1108,-1,8,3,4,3,99", 7), vec![0]);
    assert_eq!(eval("3,3,1107,-1,8,3,4,3,99", 7), vec![1]);
    assert_eq!(eval("3,3,1107,-1,8,3,4,3,99", 8), vec![0]);
    assert_eq!(
        eval(
            "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,\
             1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,\
             999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99",
            7
        ),
        vec![999]
    );
    assert_eq!(
        eval(
            "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,\
             1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,\
             999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99",
            8
        ),
        vec![1000]
    );
    assert_eq!(
        eval(
            "3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,\
             1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,\
             999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99",
            9
        ),
        vec![1001]
    );
}
